addonName = "Improved Fire Logic & API"
resource.AddWorkshop( "2805142659" )
ENTITY = FindMetaTable( "Entity" )

:WaterLevel, :IsOnFire, :GetMaterialType, :EntIndex = ENTITY
:Alive = FindMetaTable( "Player" )
:Run, :Add = hook
CurTime = CurTime

-- Default unflammable materials
-- https://wiki.facepunch.com/gmod/Enums/MAT
flammableMaterials = list.GetForEdit( "IFL - Flammable Materials", false )
flammableMaterials[ MAT_BLOODYFLESH ] = true
flammableMaterials[ MAT_ALIENFLESH ] = true
flammableMaterials[ MAT_ANTLION ] = true
flammableMaterials[ MAT_FOLIAGE ] = true
flammableMaterials[ MAT_PLASTIC ] = true
flammableMaterials[ MAT_GRASS ] = true
flammableMaterials[ MAT_FLESH ] = true
flammableMaterials[ MAT_WOOD ] = true

-- Strangely, but all sofa's are made of earth :||
flammableMaterials[ MAT_DIRT ] = true

IsFlammableModel = nil
do

    cache = {
        [""]: false
    }

    IsFlammableModel = ( entity ) ->
        modelPath = entity\GetModel!
        unless modelPath
            return false

        result = cache[ modelPath ]
        if result == nil
            result = false

            value = util.GetModelInfo( modelPath )
            if value ~= nil
                value = value.ModelKeyValues
                if value ~= nil
                    value = util.KeyValuesToTable( value )
                    if value ~= nil
                        value = value.fire_interactions
                        if value ~= nil
                            result = value.flammable == "yes"

            cache[ modelPath ] = result

        return result

    ENTITY.IsFlammableModel = IsFlammableModel

Add( "AllowEntityIgnite", "Default Fire Logic", ( entity ) ->
    if WaterLevel( entity ) > 1
        return false

    if entity\IsNPC!
        return

    if entity\IsPlayer!
        if Alive( entity )
            return

        return false

    if IsFlammableModel( entity )
        return

    unless flammableMaterials[ GetMaterialType( entity ) ]
        return false

PRE_HOOK_RETURN )

timer.Simple 0.25, ->
    sourceIgnite = ENTITY.SourceIgnite
    unless isfunction( sourceIgnite )
        sourceIgnite = ENTITY.Ignite
        ENTITY.SourceIgnite = sourceIgnite

    igniteEntity = nil
    do

        :Create, :Remove, :Exists = timer

        Add( "EntityRemoved", addonName, ( entity ) ->
            timerName = "Source::IgniteEntity #" .. EntIndex( entity )
            if Exists( timerName )
                Remove( timerName )
                return

        PRE_HOOK )

        igniteEntity = ( entity, length, radius ) ->
            Create "Source::IgniteEntity #" .. EntIndex( entity ), length, 1, ->
                if entity\IsValid!
                    entity\Extinguish!

            sourceIgnite( entity, length, radius )

    ENTITY.Ignite = ( entity, length, radius, force ) ->
        if not force and ( IsOnFire( entity ) or Run( "AllowEntityIgnite", entity ) == false )
            return false

        unless length
            length = 1

        unless radius
            radius = 0

        entity.m_fIgniteStart = CurTime!
        entity.m_fIgniteLength = length
        entity.m_iIgniteRadius = radius

        igniteEntity( entity, length, radius )
        return true

    sourceExtinguish = ENTITY.SourceExtinguish
    unless isfunction( sourceExtinguish )
        sourceExtinguish = ENTITY.Extinguish
        ENTITY.SourceExtinguish = sourceExtinguish

    ENTITY.Extinguish = ( entity, force ) ->
        unless force or IsOnFire( entity )
            return false

        if not force and Run( "AllowEntityExtinguish", entity ) == false
            if entity.m_fIgniteStart and ( CurTime! - entity.m_fIgniteStart ) < ( entity.m_fIgniteLength + 0.25 )
                entity.m_fIgniteStart = CurTime!
                igniteEntity( entity, entity.m_fIgniteLength or 1, entity.m_iIgniteRadius or 0 )

            return false

        entity.m_fLastExtinguish = CurTime!

        sourceExtinguish( entity )
        Run( "EntityExtinguished", entity )
        return true

Add( "EntityTakeDamage", addonName, ( entity, damageInfo ) ->
    if IsOnFire( entity )
        return Run( "EntityBurns", entity, damageInfo )

PRE_HOOK_RETURN )

do

    :IsSolid = ENTITY

    Add( "EntityBurns", "Fire Bugs Fix", ( entity ) ->
        if IsSolid( entity ) and ( not entity\IsPlayer! or Alive( entity ) )
            return

        entity\Extinguish( true )
        return true

    PRE_HOOK_RETURN )

Add "EntityBurns", "Water Extinguish", ( entity, damageInfo ) ->
    if WaterLevel( entity ) > 1 and entity\Extinguish!
        return true

do

    :Length = FindMetaTable( "Vector" )
    :GetVelocity = ENTITY

    Add "EntityBurns", "Hight Speed Extinguish", ( entity, damageInfo ) ->
        if Length( GetVelocity( entity ) ) > ( entity\IsPlayer! and 800 or 1500 ) and entity\Extinguish!
            return true

do

    ifl_water_extinguish_sound = CreateConVar( "ifl_water_extinguish_sound", "1", bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY ), "If enabled, extinguishing entities in water will emit specific sound.", 0, 1 )
    CHAN_STATIC = CHAN_STATIC
    :random = math

    Add( "OnEntityWaterLevelChanged", "Water Extinguish", ( entity, oldWaterLevel, newWaterLevel ) ->
        if newWaterLevel > 1 and oldWaterLevel < newWaterLevel and entity\Extinguish! and ifl_water_extinguish_sound\GetBool!
            entity\EmitSound( "player/flame_out.ogg", random( 50, 75 ), random( 60, 180 ), 1, CHAN_STATIC )

    PRE_HOOK )
